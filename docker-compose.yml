version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres_db
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=
      - POSTGRES_PASSWORD=
      - POSTGRES_DB=
    healthcheck:
      test:
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2023-11-20T22-40-07Z
    container_name: minio_storage
    ports:
      - 9000:9000 # API
      - 9001:9001 # Console
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=
      - MINIO_ROOT_PASSWORD=
    command: server /data --console-address :9001
    healthcheck:
      test:
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mlflow:
    build:
      context:.
      dockerfile: Dockerfile.mlflow
    container_name: mlflow_server
    ports:
      - 5000:5000
    environment:
      - BACKEND_STORE_URI=postgresql://:@postgres:5432/
      - ARTIFACT_ROOT=s3://mlflow/
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: unless-stopped

  prefect-server:
    image: prefecthq/prefect:2-python3.10
    container_name: prefect_server
    command: prefect server start
    ports:
      - 4200:4200
    environment:
      - PREFECT_UI_API_URL=http://localhost:4200/api
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://:@postgres:5432/
    depends_on:
      - postgres
    restart: unless-stopped

  prefect-worker:
    image: prefecthq/prefect:2-python3.10
    container_name: prefect_worker
    command: prefect worker start -p default-agent-pool
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
    depends_on:
      - prefect-server
    restart: unless-stopped
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
    volumes:
      - es_data:/usr/share/elasticsearch/data
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  es_data:
